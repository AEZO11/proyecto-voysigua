import os
import asyncio
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy import create_engine  # âœ… Importamos `create_engine` para la sesiÃ³n sÃ­ncrona
from dotenv import load_dotenv

# Cargar variables desde el archivo .env
load_dotenv()

# Construir DATABASE_URL con variables de entorno
DATABASE_URL_ASYNC = f"postgresql+asyncpg://{os.getenv('DB_USER')}:{os.getenv('DB_PASSWORD')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB_NAME')}"
DATABASE_URL_SYNC = DATABASE_URL_ASYNC.replace("asyncpg", "psycopg2")  # âœ… Motor sÃ­ncrono usa psycopg2

print(f"ðŸ“Œ DATABASE_URL_ASYNC: {DATABASE_URL_ASYNC}")  # DepuraciÃ³n
print(f"ðŸ“Œ DATABASE_URL_SYNC: {DATABASE_URL_SYNC}")  # DepuraciÃ³n

# âœ… Crear motores separados para asincronÃ­a y sincronÃ­a
async_engine = create_async_engine(DATABASE_URL_ASYNC, echo=False)
sync_engine = create_engine(DATABASE_URL_SYNC, echo=False)  # âœ… Motor sÃ­ncrono

# âœ… Crear sesiones asÃ­ncronas
AsyncSessionLocal = sessionmaker(
    bind=async_engine,
    class_=AsyncSession,
    expire_on_commit=False
)

# âœ… Crear sesiones sÃ­ncronas
SyncSessionLocal = sessionmaker(
    bind=sync_engine,  # âœ… Usamos `sync_engine` en lugar de `engine.sync_engine`
    autocommit=False,
    autoflush=False,
)

# âœ… Base para modelos
Base = declarative_base()

# âœ… Dependencia para obtener una sesiÃ³n asÃ­ncrona
async def get_async_db():
    session = AsyncSessionLocal()
    try:
        yield session
    finally:
        await session.close()

# âœ… Dependencia para obtener una sesiÃ³n sÃ­ncrona
def get_sync_db():
    db = SyncSessionLocal()
    try:
        yield db
    finally:
        db.close()
